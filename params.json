{"name":"ACME Client Utilities","tagline":"Automatic certificate acquisition tool. Let's Encrypt. Idempotent. Works like \"make\".","body":"# ACME Client Utilities\r\n\r\nacmetool is an easy-to-use command line tool for automatically acquiring\r\ncertificates from ACME servers (such as Let's Encrypt). Designed to flexibly\r\nintegrate into your webserver setup to enable automatic verification. Unlike\r\nthe official Let's Encrypt client, this doesn't modify your web server\r\nconfiguration.\r\n\r\nYou can perform verifications using port 80 or 443 (if you don't yet have a\r\nserver running on one of them); via webroot; by configuring your webserver to\r\nproxy requests for `/.well-known/acme-challenge/` to a special port (402) which\r\nacmetool can listen on; or by configuring your webserver not to listen on port\r\n80, and instead running acmetool's built in HTTPS redirector (and challenge\r\nresponder) on port 80. This is useful if all you want to do with port 80 is\r\nredirect people to port 443.\r\n\r\nYou can run acmetool on a cron job to renew certificates automatically (`acmetool --batch`).  The\r\npreferred certificate for a given hostname is always at\r\n`/var/lib/acme/live/HOSTNAME/{cert,chain,fullchain,privkey}`. You can configure\r\nacmetool to reload your webserver automatically when it renews a certificate.\r\n\r\nacmetool is intended to be \"magic-free\". All of acmetool's state is stored in a\r\nsimple, comprehensible directory of flat files. [The schema for this directory\r\nis documented.](https://github.com/hlandau/acme/blob/master/_doc/SCHEMA.md)\r\n\r\nacmetool is intended to work like \"make\". The state directory expresses target\r\ndomain names, and whenever acmetool is invoked, it ensures that valid\r\ncertificates are available to meet those names. Certificates which will expire\r\nsoon are renewed. acmetool is thus idempotent and minimises the use of state.\r\n\r\nacmetool can optionally be used [without running it as\r\nroot.](https://github.com/hlandau/acme/blob/master/_doc/NOROOT.md) If you have\r\nexisting certificates issued using the official client, acmetool can import\r\nthose certificates, keys and account keys (`acmetool import-le`).\r\n\r\n## Getting Started\r\n\r\n[**Binary releases are also available.**](https://github.com/hlandau/acme/releases)\r\n\r\nYou will need Go installed to build from source.\r\n\r\nIf you are on Linux, you will need to make sure the development files for\r\n`libcap` are installed. This is probably a package for your distro called\r\n`libcap-dev` or `libcap-devel` or similar.\r\n\r\n```bash\r\n$ git clone https://github.com/hlandau/acme\r\n$ cd acme\r\n$ make && sudo make install\r\n\r\n  # (People familiar with Go with a GOPATH setup can alternatively use go get/go install:)\r\n  $ go get github.com/hlandau/acme/cmd/acmetool\r\n\r\n# Run the quickstart wizard. Sets up account, cronjob, etc.\r\n$ sudo acmetool quickstart\r\n\r\n# Configure your webserver to serve challenges if necessary.\r\n# See https://github.com/hlandau/acme/blob/master/_doc/WSCONFIG.md\r\n$ ...\r\n\r\n# Request the hostnames you want:\r\n$ sudo acmetool want example.com www.example.com\r\n\r\n# Now you have certificates:\r\n$ ls -l /var/lib/acme/live/example.com/\r\n```\r\n\r\nThe `quickstart` subcommand is a recommended wizard which guides you through the\r\nsetup of ACME on your system.\r\n\r\nThe `want` subcommand states that you want a certificate for the given hostnames.\r\n(If you want separate certificates for each of the hostnames, run the want\r\nsubcommand separately for each hostname.)\r\n\r\nThe default subcommand, `reconcile`, is like \"make\" and makes sure all desired\r\nhostnames are satisfied by valid certificates which aren't soon to expire.\r\n`want` calls `reconcile` automatically.\r\n\r\nIf you run `acmetool reconcile` on a cronjob to facilitate automatic renewal,\r\npass `--batch` to ensure it doesn't attempt to interact with a terminal.\r\n\r\nYou can increase logging severity for debugging purposes by passing\r\n`--xlog.severity=debug`.\r\n\r\n## Validation Options\r\n\r\n<img src=\"https://i.imgur.com/w8TbgLL.png\" align=\"right\" alt=\"[screenshot]\" />\r\n\r\n**Webroot:** acmetool can place challenge files in a given directory, allowing your normal\r\nweb server to serve them. The files must be served from the path you specify at\r\n`/.well-known/acme-challenge/`.\r\n\r\n[Information on configuring your web server.](https://github.com/hlandau/acme/blob/master/_doc/WSCONFIG.md)\r\n\r\n**Proxy:** acmetool can respond to validation challenges by serving them on port 402. In\r\norder for this to be useful, you must configure your webserver to proxy\r\nrequests under `/.well-known/acme-challenge/` to\r\n`http://127.0.0.1:402/.well-known/acme-challenge`.\r\n\r\n[Information on configuring your web server.](https://github.com/hlandau/acme/blob/master/_doc/WSCONFIG.md)\r\n\r\n**Redirector:** `acmetool redirector` starts an HTTP server on port 80 which redirects all\r\nrequests to HTTPS, as well as serving any necessary validation responses. The\r\n`acmetool quickstart` wizard can set it up for you if you use systemd.\r\nOtherwise, you'll need to configure your system to run `acmetool redirector\r\n--service.uid=USERNAME --service.daemon=1` as a service, where `USERNAME` is\r\nthe username you want the daemon to drop to.\r\n\r\nMake sure your web server is not listening on port 80.\r\n\r\n**Listen:** If you are for some reason not running anything on port 80 or 443, acmetool\r\nwill use those ports. Either port being available is sufficient. This is only\r\nreally useful for development purposes.\r\n\r\n## Renewal\r\n\r\nacmetool will try to renew certificates automatically once they are 30 days\r\nfrom expiry, or 66% through their validity period, whichever is lower.\r\nNote that Let's Encrypt currently issues 90 day certificates.\r\n\r\nacmetool will exit with an error message with nonzero exit status if it cannot\r\nrenew a certificate, so it is suitable for use in a cronjob. Ensure your system\r\nis configured so that you get notifications of failing cronjobs.\r\n\r\nIf a cronjob fails, you should intervene manually to see what went wrong by\r\nrunning `acmetool` (possibly with `--xlog.severity=debug` for verbose logging).\r\n\r\n## Library\r\n\r\nThe client library which these utilities use\r\n(`github.com/hlandau/acme/acmeapi`) can be used independently by any Go code.\r\n[![GoDoc](https://godoc.org/github.com/hlandau/acme/acmeapi?status.svg)](https://godoc.org/github.com/hlandau/acme/acmeapi)\r\n\r\n[Source code.](https://github.com/hlandau/acme)\r\n\r\n## Comparison with...\r\n\r\n**Let's Encrypt Official Client:** A heavyweight Python implementation which is\r\na bit too “magic” for my tastes. Tries to mutate your webserver configuration\r\nautomatically.\r\n\r\nacmetool is a single-file binary which only depends on basic system libraries\r\n(on Linux, these are libc, libpthread, libcap, libattr). It doesn't do anything\r\nto your webserver; it just places certificates at a standard location and can\r\nalso reload your webserver (whichever webserver it is) by executing hook shell\r\nscripts.\r\n\r\nacmetool isn't based around individual transactions for obtaining certificates;\r\nit's about satisfying expressed requirements by any means necessary. Its\r\ncomprehensible, magic-free state directory makes it as stateless and idempotent\r\nas possible.\r\n\r\n**lego:** Like acmetool, [xenolf/lego](https://github.com/xenolf/lego) provides\r\na library and client utility. The utility provides commands for creating\r\ncertificates, but doesn't provide a compelling system for managing the lifetime\r\nof the short-lived certificates offered by Let's Encrypt. The user is expected\r\nto generate and install all certificates manually.\r\n\r\n**gethttpsforfree:**\r\n[diafygi/gethttpsforfree](https://github.com/diafygi/gethttpsforfree) provides\r\nan HTML file which uses JavaScript to make requests to an ACME server and\r\nobtain certificates. It's a functional user interface, but like lego it\r\nprovides no answer for the automation issue, and is thus impractical given the\r\nshort lifetime of certificates issued by Let's Encrypt.\r\n\r\n### Comparison, list of client implementations\r\n\r\n<table>\r\n<tr><td></td><th>acmetool</th><th><a href=\"https://github.com/letsencrypt/letsencrypt\">letsencrypt</a></th><th><a href=\"https://github.com/xenolf/lego\">lego</a></th><th><a href=\"https://github.com/diafygi/gethttpsforfree\">gethttpsforfree</a></th></tr>\r\n<tr><td>Automatic renewal</td><td>Yes</td><td>Not yet</td><td>No</td><td>No</td></tr>\r\n<tr><td>State management</td><td>Yes†</td><td>Yes</td><td>—</td><td>—</td></tr>\r\n<tr><td>Single-file binary</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr>\r\n<tr><td>Quickstart wizard</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td></tr>\r\n<tr><td>Modifies webserver config</td><td>No</td><td>By default</td><td>No</td><td>No</td></tr>\r\n<tr><td>Non-root support</td><td><a href=\"https://github.com/hlandau/acme/blob/master/_doc/NOROOT.md\">Optional</a></td><td>Optional</td><td>Optional</td><td>—</td></tr>\r\n<tr><td>Supports Apache</td><td>Yes</td><td>Yes</td><td>—</td><td>—</td></tr>\r\n<tr><td>Supports nginx</td><td>Yes</td><td>Experimental</td><td>—</td><td>—</td></tr>\r\n<tr><td>Supports HAProxy</td><td>Yes</td><td>No</td><td>—</td><td>—</td></tr>\r\n<tr><td>Supports any web server</td><td>Yes</td><td>Webroot‡</td><td>—</td><td>—</td></tr>\r\n<tr><td>Authorization via webroot</td><td>Yes</td><td>Yes</td><td>—</td><td>Manual</td></tr>\r\n<tr><td>Authorization via port 80 redirector</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr>\r\n<tr><td>Authorization via proxy</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr>\r\n<tr><td>Authorization via listener§</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr>\r\n<tr><td>Import state from official client</td><td>Yes</td><td>—</td><td>—</td><td>—</td></tr>\r\n<tr><td>Windows (basic) support</td><td>No</td><td>No</td><td>Yes</td><td>—</td></tr>\r\n<tr><td>Windows integration support</td><td>No</td><td>No</td><td>No</td><td>—</td></tr>\r\n\r\n</table>\r\n\r\n† acmetool has a different philosophy to state management and configuration to\r\nthe Let's Encrypt client; see the beginning of this README.\r\n\r\n‡ The webroot method does not appear to provide any means of reloading the\r\nwebserver once the certificate has been changed, which means auto-renewal\r\nrequires manual intervention.\r\n\r\n§ Requires downtime.\r\n\r\nThis table is maintained in good faith; I believe the above comparison to be\r\naccurate. If notified of any inaccuracies, I will rectify the table and publish\r\na notice of correction here:\r\n\r\n  - This table previously stated that the official Let's Encrypt client doesn't\r\n    support non-root operation. This was incorrect; it can be installed at user\r\n    level and be configured to use user-writable directories.\r\n\r\n## Licence\r\n\r\n    © 2015 Hugo Landau <hlandau@devever.net>    MIT License\r\n\r\n","google":"UA-71169913-1","note":"Don't delete this file! It's used internally to help with page regeneration."}